<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/PlayerLook.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/PlayerLook.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;public class PlayerLook : MonoBehaviour&#10;{&#10;    // TEMEL DEĞİŞKENLER&#10;    [Header(&quot;Hassasiyet Ayarları&quot;)]&#10;    public float baseMouseSensitivity = 100f; // Temel fare hassasiyetimiz.&#10;    &#10;    [Header(&quot;Referanslar&quot;)]&#10;    public Transform playerBody; // Oyuncunun gövdesi (Capsule)&#10;    public Weapon currentWeapon; // Mevcut silahımızın referansı&#10;&#10;    [Header(&quot;Kafa Sallama Ayarları&quot;)]&#10;    [SerializeField] private bool enableHeadBob = true;&#10;    [SerializeField] [Range(0, 0.1f)] private float bobAmplitude = 0.015f;&#10;    [SerializeField] [Range(0, 30)] private float bobFrequency = 10.0f;&#10;    [SerializeField] private Transform cameraHolder;&#10;&#10;    private float xRotation = 0f; // Yukarı/aşağı bakış açısını saklamak için.&#10;    private float bobTimer = 0f;&#10;    private Vector3 startPos;&#10;&#10;    // Gerekli bileşenlere referanslar&#10;    private CharacterController controller;&#10;    private PlayerMovement playerMovement;&#10;&#10;&#10;    void Start()&#10;    {&#10;        // Oyuna başlarken fare imlecini ekranın ortasına kilitle ve gizle.&#10;        Cursor.lockState = CursorLockMode.Locked;&#10;        startPos = cameraHolder.localPosition;&#10;        controller = playerBody.GetComponent&lt;CharacterController&gt;();&#10;        playerMovement = playerBody.GetComponent&lt;PlayerMovement&gt;();&#10;    }&#10;&#10;    void Update()&#10;    {&#10;        // Fare girdilerini al&#10;        float mouseX = Input.GetAxis(&quot;Mouse X&quot;) * Time.deltaTime;&#10;        float mouseY = Input.GetAxis(&quot;Mouse Y&quot;) * Time.deltaTime;&#10;&#10;        // Silahın durumuna göre anlık hassasiyeti hesapla&#10;        // BU KISIM MEKANİĞİN KALBİ! Silah script'inden gelen çarpanı kullanıyoruz.&#10;        float currentSensitivity = baseMouseSensitivity * currentWeapon.GetSensitivityMultiplier();&#10;        &#10;        // Yatayda (sağa-sola) tüm oyuncu gövdesini döndür&#10;        playerBody.Rotate(Vector3.up * mouseX * currentSensitivity);&#10;&#10;        // Dikeyde (aşağı-yukarı) sadece kamerayı döndür&#10;        xRotation -= mouseY * currentSensitivity;&#10;        &#10;        // Kameranın 180 derece dönüp tepe taklak olmasını engelle (clamping)&#10;        xRotation = Mathf.Clamp(xRotation, -90f, 90f);&#10;&#10;        // Hesaplanan dikey açıyı kameraya uygula&#10;        transform.localRotation = Quaternion.Euler(xRotation, 0f, 0f);&#10;&#10;        // Kafa sallama efektini uygula&#10;        if (enableHeadBob)&#10;        {&#10;            HandleHeadBob();&#10;        }&#10;    }&#10;&#10;    private void HandleHeadBob()&#10;    {&#10;        if (!controller.isGrounded) return;&#10;&#10;        float horizontalInput = Input.GetAxis(&quot;Horizontal&quot;);&#10;        float verticalInput = Input.GetAxis(&quot;Vertical&quot;);&#10;&#10;        if (Mathf.Abs(horizontalInput) &gt; 0.1f || Mathf.Abs(verticalInput) &gt; 0.1f)&#10;        {&#10;            // Oyuncu hareket ediyor&#10;            bobTimer += Time.deltaTime * (playerMovement.isSprinting ? bobFrequency * 1.5f : bobFrequency);&#10;            cameraHolder.localPosition = new Vector3(&#10;                startPos.x + Mathf.Sin(bobTimer) * bobAmplitude,&#10;                startPos.y + Mathf.Abs(Mathf.Sin(bobTimer) * bobAmplitude),&#10;                startPos.z&#10;            );&#10;        }&#10;        else&#10;        {&#10;            // Oyuncu duruyor, kamerayı başlangıç pozisyonuna geri getir&#10;            bobTimer = 0;&#10;            cameraHolder.localPosition = Vector3.Lerp(cameraHolder.localPosition, startPos, Time.deltaTime * bobFrequency);&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="using UnityEngine;&#13;&#10;&#13;&#10;public class PlayerLook : MonoBehaviour&#13;&#10;{&#13;&#10;    // TEMEL DEĞİŞKENLER&#13;&#10;    [Header(&quot;Hassasiyet Ayarları&quot;)]&#13;&#10;    public float baseMouseSensitivity = 100f; // Temel fare hassasiyetimiz.&#13;&#10;    &#13;&#10;    [Header(&quot;Referanslar&quot;)]&#13;&#10;    public Transform playerBody; // Oyuncunun gövdesi (Capsule)&#13;&#10;    public Weapon currentWeapon; // Mevcut silahımızın referansı&#13;&#10;&#13;&#10;    private float xRotation = 0f; // Yukarı/aşağı bakış açısını saklamak için.&#13;&#10;&#13;&#10;    void Start()&#13;&#10;    {&#13;&#10;        // Oyuna başlarken fare imlecini ekranın ortasına kilitle ve gizle.&#13;&#10;        Cursor.lockState = CursorLockMode.Locked;&#13;&#10;    }&#13;&#10;&#13;&#10;    void Update()&#13;&#10;    {&#13;&#10;        // Fare girdilerini al&#13;&#10;        float mouseX = Input.GetAxis(&quot;Mouse X&quot;) * Time.deltaTime;&#13;&#10;        float mouseY = Input.GetAxis(&quot;Mouse Y&quot;) * Time.deltaTime;&#13;&#10;&#13;&#10;        // Silahın durumuna göre anlık hassasiyeti hesapla&#13;&#10;        // BU KISIM MEKANİĞİN KALBİ! Silah script'inden gelen çarpanı kullanıyoruz.&#13;&#10;        float currentSensitivity = baseMouseSensitivity * currentWeapon.GetSensitivityMultiplier();&#13;&#10;        &#13;&#10;        // Yatayda (sağa-sola) tüm oyuncu gövdesini döndür&#13;&#10;        playerBody.Rotate(Vector3.up * mouseX * currentSensitivity);&#13;&#10;&#13;&#10;        // Dikeyde (aşağı-yukarı) sadece kamerayı döndür&#13;&#10;        xRotation -= mouseY * currentSensitivity;&#13;&#10;        &#13;&#10;        // Kameranın 180 derece dönüp tepe taklak olmasını engelle (clamping)&#13;&#10;        xRotation = Mathf.Clamp(xRotation, -90f, 90f);&#13;&#10;&#13;&#10;        // Hesaplanan dikey açıyı kameraya uygula&#13;&#10;        transform.localRotation = Quaternion.Euler(xRotation, 0f, 0f);&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;public class PlayerMovement : MonoBehaviour&#13;&#10;{&#13;&#10;    // TEMEL DEĞİŞKENLER&#13;&#10;    [Header(&quot;Hareket Ayarları&quot;)]&#13;&#10;    public float walkSpeed = 2f; // Yürüyüş hızı&#13;&#10;    public float sprintSpeed = 5f; // Koşu hızı&#13;&#10;    public float jumpHeight = 1f; // Zıplama yüksekliği&#13;&#10;    public float gravity = -9.81f; // Yerçekimi kuvveti&#13;&#10;&#13;&#10;    [Header(&quot;Referanslar&quot;)]&#13;&#10;    public Transform playerBody; // Oyuncunun gövdesi (Capsule)&#13;&#10;    public Camera playerCamera; // Oyuncunun kamerası&#13;&#10;&#13;&#10;    private CharacterController controller;&#13;&#10;    private Vector3 velocity;&#13;&#10;    private bool isGrounded;&#13;&#10;&#13;&#10;    void Start()&#13;&#10;    {&#13;&#10;        controller = GetComponent&lt;CharacterController&gt;();&#13;&#10;    }&#13;&#10;&#13;&#10;    void Update()&#13;&#10;    {&#13;&#10;        // Yer ile temas durumunu kontrol et&#13;&#10;        isGrounded = Physics.CheckSphere(transform.position, 0.1f);&#13;&#10;&#13;&#10;        if (isGrounded &amp;&amp; velocity.y &lt; 0)&#13;&#10;        {&#13;&#10;            velocity.y = -2f; // Küçük bir negatif değer vererek oyuncunun yere temas ettiğinden emin ol&#13;&#10;        }&#13;&#10;&#13;&#10;        // Hareket girdilerini al&#13;&#10;        float horizontalInput = Input.GetAxis(&quot;Horizontal&quot;);&#13;&#10;        float verticalInput = Input.GetAxis(&quot;Vertical&quot;);&#13;&#10;&#13;&#10;        // Hareket yönünü belirle&#13;&#10;        Vector3 moveDirection = playerBody.right * horizontalInput + playerBody.forward * verticalInput;&#13;&#10;&#13;&#10;        // Hareket et&#13;&#10;        controller.Move(moveDirection * (Input.GetKey(KeyCode.LeftShift) ? sprintSpeed : walkSpeed) * Time.deltaTime);&#13;&#10;&#13;&#10;        // Zıplama&#13;&#10;        if (Input.GetButtonDown(&quot;Jump&quot;) &amp;&amp; isGrounded)&#13;&#10;        {&#13;&#10;            velocity.y = Mathf.Sqrt(jumpHeight * -2f * gravity);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Yerçekimini uygula&#13;&#10;        velocity.y += gravity * Time.deltaTime;&#13;&#10;        controller.Move(velocity * Time.deltaTime);&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;public class CameraBob : MonoBehaviour&#13;&#10;{&#13;&#10;    // TEMEL DEĞİŞKENLER&#13;&#10;    [Header(&quot;Sallantı Ayarları&quot;)]&#13;&#10;    public float bobFrequency = 5f; // Sallantı sıklığı&#13;&#10;    public float bobAmplitude = 0.1f; // Sallantı genliği&#13;&#10;&#13;&#10;    [Header(&quot;Referanslar&quot;)]&#13;&#10;    public Transform playerBody; // Oyuncunun gövdesi (Capsule)&#13;&#10;    public Transform cameraHolder; // Kameranın tutucu objesi&#13;&#10;&#13;&#10;    private float bobTimer = 0f;&#13;&#10;    private Vector3 startPos;&#13;&#10;&#13;&#10;    // Gerekli bileşenlere referanslar&#13;&#10;    private CharacterController controller;&#13;&#10;&#13;&#10;&#13;&#10;    void Start()&#13;&#10;    {&#13;&#10;        // Oyuna başlarken fare imlecini ekranın ortasına kilitle ve gizle.&#13;&#10;        Cursor.lockState = CursorLockMode.Locked;&#13;&#10;        startPos = cameraHolder.localPosition;&#13;&#10;        controller = playerBody.GetComponent&lt;CharacterController&gt;();&#13;&#10;    }&#13;&#10;&#13;&#10;    void Update()&#13;&#10;    {&#13;&#10;        // Oyuncu hareket ediyorsa kamerayı salla&#13;&#10;        float horizontalInput = Input.GetAxis(&quot;Horizontal&quot;);&#13;&#10;        float verticalInput = Input.GetAxis(&quot;Vertical&quot;);&#13;&#10;&#13;&#10;        if (Mathf.Abs(horizontalInput) &gt; 0.1f || Mathf.Abs(verticalInput) &gt; 0.1f)&#13;&#10;        {&#13;&#10;            // Oyuncu hareket ediyor&#13;&#10;            bobTimer += Time.deltaTime * bobFrequency;&#13;&#10;            cameraHolder.localPosition = new Vector3(&#13;&#10;                startPos.x + Mathf.Sin(bobTimer) * bobAmplitude,&#13;&#10;                startPos.y + Mathf.Abs(Mathf.Sin(bobTimer) * bobAmplitude),&#13;&#10;                startPos.z&#13;&#10;            );&#13;&#10;        }&#13;&#10;        else&#13;&#10;        {&#13;&#10;            // Oyuncu hareket etmiyorsa sallantıyı sıfırla&#13;&#10;            bobTimer = 0f;&#13;&#10;            cameraHolder.localPosition = startPos;&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/PlayerMovement.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/PlayerMovement.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using System; // Ekledik&#10;&#10;// Bu component'in olduğu objeye bir CharacterController eklenmesini zorunlu kıl.&#10;[RequireComponent(typeof(CharacterController))]&#10;public class PlayerMovement : MonoBehaviour&#10;{&#10;    [Header(&quot;Hareket Ayarları&quot;)]&#10;    public float speed = 12f; // Karakterin yürüme hızı&#10;    public float gravity = -9.81f; // Yer çekimi kuvveti&#10;&#10;    [Header(&quot;Ölüm Ayarları&quot;)]&#10;    [Tooltip(&quot;Karakterin altındaki ölüm seviyesi (Y koordinatı)&quot;)]&#10;    public float deathYLevel = -50f; // Örneğin Y = -50'nin altına düşerse ölsün&#10;&#10;    private CharacterController controller;&#10;    private PlayerHealth playerHealth; // PlayerHealth script'ine referans&#10;    private Vector3 velocity; // Yer çekiminden kaynaklanan dikey hız&#10;&#10;    void Start()&#10;    {&#10;        // Script başladığında bileşenleri bul ve ata.&#10;        controller = GetComponent&lt;CharacterController&gt;();&#10;        playerHealth = GetComponent&lt;PlayerHealth&gt;(); // Aynı obje üzerindeki Health script'ini al&#10;&#10;        // Eğer Health script'i yoksa hata ver&#10;        if (playerHealth == null)&#10;        {&#10;            Debug.LogError(&quot;PlayerMovement script'i, PlayerHealth script'ini bulamadı! Lütfen ekleyin.&quot;);&#10;        }&#10;    }&#10;&#10;    void Update()&#10;    {&#10;        // === 1. DÜŞÜŞ KONTROLÜ (YENİ MEKANİK) ===&#10;        // Karakterin Y pozisyonu ölüm seviyesinin altına düştüyse ve hala ölmediyse&#10;        if (transform.position.y &lt; deathYLevel &amp;&amp; playerHealth.CurrentHealth &gt; 0)&#10;        {&#10;            // Karakteri anında öldür&#10;            playerHealth.TakeDamage(playerHealth.maxHealth); &#10;            // Veya sadece playerHealth.Die(); fonksiyonunu çağırabilirsiniz. &#10;            // (TakeDamage ile çağırmak, hasar olaylarının tetiklenmesini sağlar.)&#10;            return; // Ölüm sonrası hareket hesaplamalarına devam etme&#10;        }&#10;&#10;&#10;        // === 2. HAREKET KODU (MEVCUT KODUNUZ) ===&#10;        &#10;        // Klavyeden W, A, S, D girdilerini al (yatay ve dikey eksen)&#10;        float x = Input.GetAxis(&quot;Horizontal&quot;); &#10;        float z = Input.GetAxis(&quot;Vertical&quot;);   &#10;&#10;        // Hareket vektörünü oluştur. &#10;        Vector3 move = transform.right * x + transform.forward * z;&#10;&#10;        // Hareket vektörünü hızla ve zamanla çarparak uygula&#10;        controller.Move(move * speed * Time.deltaTime);&#10;&#10;        // Yer çekimini uygula&#10;        velocity.y += gravity * Time.deltaTime;&#10;        controller.Move(velocity * Time.deltaTime);&#10;&#10;        // Eğer karakter yerdeyse yer çekimi hızını sıfırla ki sürekli artmasın.&#10;        if (controller.isGrounded &amp;&amp; velocity.y &lt; 0)&#10;        {&#10;            velocity.y = -2f; &#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="using UnityEngine;&#10;using System; // Ekledik&#10;&#10;// Bu component'in olduğu objeye bir CharacterController eklenmesini zorunlu kıl.&#10;[RequireComponent(typeof(CharacterController))]&#10;public class PlayerMovement : MonoBehaviour&#10;{&#10;    [Header(&quot;Hareket Ayarları&quot;)]&#10;    public float speed = 12f; // Karakterin yürüme hızı&#10;    public float gravity = -9.81f; // Yer çekimi kuvveti&#10;&#10;    [Header(&quot;Ölüm Ayarları&quot;)]&#10;    [Tooltip(&quot;Karakterin altındaki ölüm seviyesi (Y koordinatı)&quot;)]&#10;    public float deathYLevel = -50f; // Örneğin Y = -50'nin altına düşerse ölsün&#10;&#10;    private CharacterController controller;&#10;    private PlayerHealth playerHealth; // PlayerHealth script'ine referans&#10;    private Vector3 velocity; // Yer çekiminden kaynaklanan dikey hız&#10;&#10;    void Start()&#10;    {&#10;        // Script başladığında bileşenleri bul ve ata.&#10;        controller = GetComponent&lt;CharacterController&gt;();&#10;        playerHealth = GetComponent&lt;PlayerHealth&gt;(); // Aynı obje üzerindeki Health script'ini al&#10;&#10;        // Eğer Health script'i yoksa hata ver&#10;        if (playerHealth == null)&#10;        {&#10;            Debug.LogError(&quot;PlayerMovement script'i, PlayerHealth script'ini bulamadı! Lütfen ekleyin.&quot;);&#10;        }&#10;    }&#10;&#10;    void Update()&#10;    {&#10;        // === 1. DÜŞÜŞ KONTROLÜ (YENİ MEKANİK) ===&#10;        // Karakterin Y pozisyonu ölüm seviyesinin altına düştüyse ve hala ölmediyse&#10;        if (transform.position.y &lt; deathYLevel &amp;&amp; playerHealth.CurrentHealth &gt; 0)&#10;        {&#10;            // Karakteri anında öldür&#10;            playerHealth.TakeDamage(playerHealth.maxHealth); &#10;            // Veya sadece playerHealth.Die(); fonksiyonunu çağırabilirsiniz. &#10;            // (TakeDamage ile çağırmak, hasar olaylarının tetiklenmesini sağlar.)&#10;            return; // Ölüm sonrası hareket hesaplamalarına devam etme&#10;        }&#10;&#10;&#10;        // === 2. HAREKET KODU (MEVCUT KODUNUZ) ===&#10;        &#10;        // Klavyeden W, A, S, D girdilerini al (yatay ve dikey eksen)&#10;        float x = Input.GetAxis(&quot;Horizontal&quot;); &#10;        float z = Input.GetAxis(&quot;Vertical&quot;);   &#10;&#10;        // Hareket vektörünü oluştur. &#10;        Vector3 move = transform.right * x + transform.forward * z;&#10;&#10;        // Hareket vektörünü hızla ve zamanla çarparak uygula&#10;        controller.Move(move * speed * Time.deltaTime);&#10;&#10;        // Yer çekimini uygula&#10;        velocity.y += gravity * Time.deltaTime;&#10;        controller.Move(velocity * Time.deltaTime);&#10;&#10;        // Eğer karakter yerdeyse yer çekimi hızını sıfırla ki sürekli artmasın.&#10;        if (controller.isGrounded &amp;&amp; velocity.y &lt; 0)&#10;        {&#10;            velocity.y = -2f; &#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>